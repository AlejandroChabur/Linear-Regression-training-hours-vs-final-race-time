# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bhT7abxoIp_qAyrLXrz1Q-FQ2s1OoUKt
"""

import numpy as np  # Se importa la biblioteca NumPy
from sklearn.model_selection import train_test_split  # dividir datos en entrenamiento y prueba.
from sklearn.linear_model import LinearRegression  # Se importa el modelo de Regresión Lineal de scikit-learn.
import matplotlib.pyplot as plt  # crear gráficos.

# Datos de horas de entrenamiento.
TrainingDuration_hours = np.array([1, 4, 2, 6, 3, 5, 7, 8, 9, 3.5, 2.5, 7.5, 6.5, 4.5, 5.5, 1.5, 8.5, 9.5, 2.2, 5.2, 3.8, 7.2, 4.8, 6.8, 9.8])
# Datos de tiempos de carrera en minutos.
RaceTime_minutes = np.array([32, 24, 28, 20, 26, 22, 18, 15, 14, 27, 30, 16, 19, 25, 23, 31, 14, 13, 29, 21, 28, 17, 24, 22, 12])

# Se ajusta el array de horas de entrenamiento para tener una sola columna (matriz columna).
x = TrainingDuration_hours.reshape(-1, 1)
# El array de tiempos de carrera no necesita modificaciones.
y = RaceTime_minutes

# Se divide el conjunto de datos en entrenamiento y prueba. El 20% de los datos se asigna a prueba, y el 80% a entrenamiento.
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

# Se crea un modelo de Regresión Lineal.
model = LinearRegression()
# Se entrena el modelo con los datos de entrenamiento (x_train y y_train).
model.fit(x_train, y_train)

# Se realizan predicciones usando los datos de prueba (x_test).
y_pred = model.predict(x_test)
# Se calcula el coeficiente de determinación (R^2), que indica qué tan bien se ajusta el modelo a los datos de prueba.
r2 = model.score(x_test, y_test)
print("R2 Score:", r2)  # Se imprime el valor de R^2.

# Se obtiene el coeficiente de la regresión lineal, es decir, la pendiente de la recta.
coefficiente = model.coef_[0]
# Se obtiene el valor del intercepto, el punto donde la recta corta el eje y.
intercept = model.intercept_
print("Coeficiente:", coefficiente)  # Se imprime el coeficiente.
print("Intercepto:", intercept)  # Se imprime el intercepto.

# Se imprimen algunos mensajes para describir el modelo.
print("Linear Regression")
print("Actual vs Predicted")

# Se imprime una comparación entre los valores reales y los valores predichos para los datos de prueba.
for actual, predicted in zip(y_test, y_pred):
    print(f"Actual: {actual:.2f}, Predicted: {predicted:.2f}")

# Se crea un gráfico de dispersión de las horas de entrenamiento (en rojo) y se dibuja la recta de predicción (en azul).
plt.scatter(x, y, color='red', label='Training Hours')  # Se grafican los puntos originales (horas de entrenamiento vs tiempo de carrera).
plt.plot(x_test, y_pred, color='blue', label='Predicted Times')  # Se dibuja la línea de predicción.
plt.xlabel('Training hours duration')  # Etiqueta para el eje x.
plt.ylabel('Final Race time minutes')  # Etiqueta para el eje y.
plt.title('Linear Regression: training hours vs final race')  # Título del gráfico.
plt.legend()  # Se muestra la leyenda en el gráfico.
plt.show()  # Se muestra el gráfico.